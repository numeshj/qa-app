// Minimal-first schema (add only essential relations/fields first to keep code simple)
// Expand later as needed.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  roles         UserRole[]
  sessions      UserSession[]
  projectsOwned Project[] @relation("ProjectOwner")
  TestCaseCreated TestCase[] @relation("TestCaseCreatedBy")
  TestCaseUpdated TestCase[] @relation("TestCaseUpdatedBy")
  TestCaseFilesAuthored TestCaseFile[] @relation("TestCaseFileAuthor")
  DefectFilesAuthored DefectFile[] @relation("DefectFileAuthor")
  DefectAssigned Defect[]   @relation("DefectAssignedTo")
  DefectReported Defect[]   @relation("DefectReportedBy")
  auditLogs     AuditLog[]
  goalFocusAreas GoalFocusArea[]
  weeklyPlans   WeeklyPlan[]
  dailyPlans    DailyPlan[]
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  users       UserRole[]
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int
  @@id([userId, roleId])
  @@map("user_roles")
}

model UserSession {
  id               Int       @id @default(autoincrement())
  user             User      @relation(fields: [userId], references: [id])
  userId           Int
  refreshTokenHash String    @map("refresh_token_hash")
  userAgent        String?   @map("user_agent")
  ip               String?
  createdAt        DateTime  @default(now()) @map("created_at")
  expiresAt        DateTime  @map("expires_at")
  revokedAt        DateTime? @map("revoked_at")
  @@map("user_sessions")
}

model Project {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  name        String
  description String?
  status      String       @default("ongoing")
  startDate   DateTime?   @map("start_date")
  endDate     DateTime?   @map("end_date")
  owner       User?       @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId     Int?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  testCaseFiles TestCaseFile[]
  testCases   TestCase[]
  defects     Defect[]
  defectFiles DefectFile[]
}

model TestCaseFile {
  id           Int       @id @default(autoincrement())
  project      Project   @relation(fields: [projectId], references: [id])
  projectId    Int
  name         String
  version      String?   @default("1.0")
  environment  String?
  releaseBuild String?   @map("release_build")
  refer        String?
  author       User?     @relation("TestCaseFileAuthor", fields: [authorId], references: [id])
  authorId     Int?
  isDeleted    Boolean   @default(false) @map("is_deleted")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  testCases    TestCase[]
  weeklyGoalLinks WeeklyGoalTestFile[]
  dailyEntryLinks DailyEntryTestFile[]
  @@unique([projectId, name])
  @@map("test_case_files")
}

model TestCase {
  id             Int       @id @default(autoincrement())
  project        Project   @relation(fields: [projectId], references: [id])
  projectId      Int
  testCaseFile   TestCaseFile? @relation(fields: [testCaseFileId], references: [id])
  testCaseFileId Int?
  testCaseIdCode String    @map("test_case_id_code")
  category       String?
  featureName    String?   @map("feature_name")
  description    String?
  subFunctionality String? @map("sub_functionality")
  preRequisite   String?   @map("pre_requisite")
  inputData      Json?     @map("input_data")
  expectedResult String?   @map("expected_result")
  severity       String?
  complexity     String?
  actualResult   String?   @map("actual_result")
  status         String?
  defectIdRef    String?   @map("defect_id_ref")
  comments       String?
  labels         String?   // store CSV for simplicity first; can migrate to SET later
  createdBy      User?     @relation("TestCaseCreatedBy", fields: [createdById], references: [id])
  createdById    Int?
  updatedBy      User?     @relation("TestCaseUpdatedBy", fields: [updatedById], references: [id])
  updatedById    Int?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  artifacts      TestCaseArtifact[]
  @@unique([projectId, testCaseIdCode])
  @@map("test_cases")
}

model TestCaseArtifact {
  id          Int      @id @default(autoincrement())
  testCase    TestCase @relation(fields: [testCaseId], references: [id])
  testCaseId  Int
  type        ArtifactType
  filePath    String    @map("file_path")
  originalName String   @map("original_name")
  mimeType    String    @map("mime_type")
  sizeBytes   Int       @map("size_bytes")
  createdAt   DateTime  @default(now()) @map("created_at")
  @@map("test_case_artifacts")
}

enum ArtifactType {
  image
  video
}

model Defect {
  id            Int      @id @default(autoincrement())
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     Int
  defectFile    DefectFile? @relation(fields: [defectFileId], references: [id])
  defectFileId  Int?
  defectIdCode  String   @map("defect_id_code")
  module        String?
  title         String
  description   String?
  testData      Json?    @map("test_data")
  actualResults String?  @map("actual_results")
  expectedResults String? @map("expected_results")
  priority      String?
  severity      String?
  status        String?  @default("open")
  release       String?
  assignedTo    User?    @relation("DefectAssignedTo", fields: [assignedToId], references: [id])
  assignedToId  Int?
  deliveryDate  DateTime? @map("delivery_date")
  reportedBy    User?    @relation("DefectReportedBy", fields: [reportedById], references: [id])
  reportedById  Int?
  labels        String?  // CSV minimal first
  environment   String?
  rcaStatus     String? @map("rca_status")
  reportedDate  DateTime? @map("reported_date")
  closedDate    DateTime? @map("closed_date")
  comments      String?
  triageComments String?  @map("triage_comments")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  artifacts     DefectArtifact[]
  @@index([defectFileId])
  @@unique([projectId, defectIdCode])
  @@map("defects")
}

model DefectFile {
  id           Int       @id @default(autoincrement())
  project      Project   @relation(fields: [projectId], references: [id])
  projectId    Int
  name         String
  version      String?   @default("1.0")
  environment  String?
  releaseBuild String?   @map("release_build")
  refer        String?
  author       User?     @relation("DefectFileAuthor", fields: [authorId], references: [id])
  authorId     Int?
  isDeleted    Boolean   @default(false) @map("is_deleted")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  defects      Defect[]
  weeklyGoalLinks WeeklyGoalDefectFile[]
  dailyEntryLinks DailyEntryDefectFile[]
  @@unique([projectId, name])
  @@map("defect_files")
}

model DefectArtifact {
  id          Int      @id @default(autoincrement())
  defect      Defect   @relation(fields: [defectId], references: [id])
  defectId    Int
  type        ArtifactType
  filePath    String  @map("file_path")
  originalName String @map("original_name")
  mimeType    String  @map("mime_type")
  sizeBytes   Int     @map("size_bytes")
  createdAt   DateTime @default(now()) @map("created_at")
  @@map("defect_artifacts")
}

// Optional audit minimal
model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
  entityType  String   @map("entity_type")
  entityId    Int      @map("entity_id")
  action      String
  beforeJson  Json?    @map("before_json")
  afterJson   Json?    @map("after_json")
  createdAt   DateTime @default(now()) @map("created_at")
  @@map("audit_logs")
}

// Generic lookup table for dynamic dropdown values
model LookupValue {
  id         Int      @id @default(autoincrement())
  category   String
  code       String
  label      String?
  sortOrder  Int?     @map("sort_order")
  active     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at")
  @@unique([category, code])
  @@map("lookup_values")
}

enum WeeklyGoalStatus {
  planned
  on_track
  at_risk
  completed
  deferred
}

enum DailyEntryStatus {
  not_started
  in_progress
  done
  blocked
}

model GoalFocusArea {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  name        String
  description String?       @db.Text
  weight      Int           @default(0)
  color       String        @default("#0ea5e9")
  archived    Boolean       @default(false)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  weeklyGoals WeeklyGoal[]
  dailyEntries DailyEntry[]
  @@unique([userId, name])
  @@map("goal_focus_areas")
}

model WeeklyPlan {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  weekStart      DateTime      @map("week_start")
  theme          String?
  summaryNote    String?       @map("summary_note") @db.Text
  overallScore   Int?          @map("overall_score")
  moraleScore    Int?          @map("morale_score")
  highlightNotes String?       @map("highlight_notes") @db.Text
  adjustmentNotes String?      @map("adjustment_notes") @db.Text
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  goals          WeeklyGoal[]
  @@unique([userId, weekStart])
  @@map("weekly_plans")
}

model WeeklyGoal {
  id             Int              @id @default(autoincrement())
  plan           WeeklyPlan       @relation(fields: [planId], references: [id])
  planId         Int
  focusArea      GoalFocusArea?   @relation(fields: [focusAreaId], references: [id])
  focusAreaId    Int?
  title          String
  metric         String?
  progress       Int              @default(0)
  status         WeeklyGoalStatus @default(planned)
  impactScore    Int              @default(3) @map("impact_score")
  owner          String?
  notes          String?          @db.Text
  updateSummary  String?          @map("update_summary") @db.Text
  changeNotes    String?          @map("change_notes") @db.Text
  reviewerNotes  String?          @map("reviewer_notes") @db.Text
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  testFiles      WeeklyGoalTestFile[]
  defectFiles    WeeklyGoalDefectFile[]
  @@map("weekly_goals")
}

model WeeklyGoalTestFile {
  id            Int           @id @default(autoincrement())
  weeklyGoal    WeeklyGoal    @relation(fields: [weeklyGoalId], references: [id], onDelete: Cascade)
  weeklyGoalId  Int           @map("weekly_goal_id")
  testCaseFile  TestCaseFile  @relation(fields: [testCaseFileId], references: [id])
  testCaseFileId Int          @map("test_case_file_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  @@unique([weeklyGoalId, testCaseFileId], map: "weekly_goal_test_file_unique")
  @@map("weekly_goal_test_files")
}

model WeeklyGoalDefectFile {
  id             Int          @id @default(autoincrement())
  weeklyGoal     WeeklyGoal   @relation(fields: [weeklyGoalId], references: [id], onDelete: Cascade)
  weeklyGoalId   Int          @map("weekly_goal_id")
  defectFile     DefectFile   @relation(fields: [defectFileId], references: [id])
  defectFileId   Int          @map("defect_file_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  @@unique([weeklyGoalId, defectFileId], map: "weekly_goal_defect_file_unique")
  @@map("weekly_goal_defect_files")
}

model DailyPlan {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [userId], references: [id])
  userId         Int
  planDate       DateTime       @map("plan_date")
  dayNote        String?        @map("day_note") @db.Text
  energyScore    Int?           @map("energy_score")
  clarityScore   Int?           @map("clarity_score")
  highlightNotes String?        @map("highlight_notes") @db.Text
  blockerNotes   String?        @map("blocker_notes") @db.Text
  tomorrowNotes  String?        @map("tomorrow_notes") @db.Text
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  entries        DailyEntry[]
  @@unique([userId, planDate])
  @@map("daily_plans")
}

model DailyEntry {
  id            Int             @id @default(autoincrement())
  plan          DailyPlan       @relation(fields: [planId], references: [id])
  planId        Int             @map("plan_id")
  focusArea     GoalFocusArea?  @relation(fields: [focusAreaId], references: [id])
  focusAreaId   Int?
  title         String
  status        DailyEntryStatus @default(not_started)
  impactScore   Int              @default(3) @map("impact_score")
  effortScore   Int              @default(2) @map("effort_score")
  notes         String?          @db.Text
  updateSummary String?          @map("update_summary") @db.Text
  comment       String?          @db.Text
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  testFiles     DailyEntryTestFile[]
  defectFiles   DailyEntryDefectFile[]
  @@map("daily_entries")
}

model DailyEntryTestFile {
  id             Int           @id @default(autoincrement())
  dailyEntry     DailyEntry    @relation(fields: [dailyEntryId], references: [id], onDelete: Cascade)
  dailyEntryId   Int           @map("daily_entry_id")
  testCaseFile   TestCaseFile  @relation(fields: [testCaseFileId], references: [id])
  testCaseFileId Int           @map("test_case_file_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  @@unique([dailyEntryId, testCaseFileId], map: "daily_entry_test_file_unique")
  @@map("daily_entry_test_files")
}

model DailyEntryDefectFile {
  id            Int          @id @default(autoincrement())
  dailyEntry    DailyEntry   @relation(fields: [dailyEntryId], references: [id], onDelete: Cascade)
  dailyEntryId  Int          @map("daily_entry_id")
  defectFile    DefectFile   @relation(fields: [defectFileId], references: [id])
  defectFileId  Int          @map("defect_file_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  @@unique([dailyEntryId, defectFileId], map: "daily_entry_defect_file_unique")
  @@map("daily_entry_defect_files")
}
